// https://www.chaijs.com/api/bdd/ (Chai Assertion Library docs)
// https://mochajs.org/ (eg. describe(), it() conventions)
// https://devhints.io/chai (Chai.js cheatseet)
// https://www.digitalocean.com/community/tutorials/test-a-node-restful-api-with-mocha-and-chai

// https://restfulapi.net/http-status-codes/

const chai = require('chai')
const chaiHttp = require('chai-http')
const { expect } = require('chai')
const server = require('../app')

chai.use(chaiHttp)

const endpoint = '/reservation'

let res1; let res2; let res3 // responses

// reservation #1, should be accepted
const reservationAccept = {
  start: '2020-10-03 08:00',
  end: '2020-10-03 10:00',
  clientid: 1,
  serviceproviderid: 1,
}

// reservation #2, should be denied
const reservationDeny = {
  start: '2020-10-03 09:00',
  end: '2020-10-03 11:00',
  clientid: 2,
  serviceproviderid: 1,
}

describe('POST /reservation', () => {
  before(async () => { // runs once before the first test in this block
    // try to add rservation to free slot
    res1 = await chai.request(server).post(endpoint).send(reservationAccept)
    // try to add reservation to reserved slot
    res2 = await chai.request(server).post(endpoint).send(reservationDeny)
    // get all reservations
    res3 = await chai.request(server).get('/reservations')
  })

  it('should accept reservation when serviceprovider is free', () => {
    /* eslint semi: ["error", "never"] */

    // In a POST status 200 will contain an entity describing or containing the result of the action
    expect(res1.status).to.equal(200)
    expect(res1.body).to.be.an('object')
    // TODO: poor implementation, refactor to use model
    expect(res1.body).to.equal(reservationAccept)
  })

  it('should not accept reservation when serviceprovider is booked', () => {
    expect(res2.status).to.equal(403) // HTTP 403 forbidden
  })

  it('should save accepted reservation to db', () => {
    expect(res3.body).to.have.members(reservationAccept)
  })

  it('should not save denied reservation to db', () => {
    expect(res3.body).not.to.have.members(reservationDeny)
  })
})
